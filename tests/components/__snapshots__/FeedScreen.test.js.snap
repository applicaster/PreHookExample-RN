// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FeedScreen component renders correctly while loading 1`] = `
<View
  style={
    Array [
      Object {
        "backgroundColor": "undefined99",
      },
      Object {
        "flex": 1,
      },
    ]
  }
>
  <RCTScrollView
    contentContainerStyle={
      Array [
        Object {
          "backgroundColor": "transparent",
          "paddingTop": 5,
        },
      ]
    }
    data={undefined}
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={4}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={1}
    onContentSizeChange={[Function]}
    onEndReached={[Function]}
    onEndReachedThreshold={1}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onRefresh={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    refreshControl={
      <RefreshControlMock
        onRefresh={[Function]}
        progressViewOffset={undefined}
        refreshing={false}
      />
    }
    refreshing={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    style={
      Array [
        Object {
          "backgroundColor": "transparent",
          "paddingBottom": 5,
        },
      ]
    }
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <RCTRefreshControl />
    <View />
  </RCTScrollView>
  <ModalScreen />
  <WritePostButton />
</View>
`;

exports[`FeedScreen component renders correctly while loading with events 1`] = `
<View
  style={
    Array [
      Object {
        "backgroundColor": "undefined99",
      },
      Object {
        "flex": 1,
      },
    ]
  }
>
  <RCTScrollView
    contentContainerStyle={
      Array [
        Object {
          "backgroundColor": "transparent",
          "paddingTop": 5,
        },
      ]
    }
    data={undefined}
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={4}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={1}
    onContentSizeChange={[Function]}
    onEndReached={[Function]}
    onEndReachedThreshold={1}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onRefresh={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    refreshControl={
      <RefreshControlMock
        onRefresh={[Function]}
        progressViewOffset={undefined}
        refreshing={false}
      />
    }
    refreshing={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    style={
      Array [
        Object {
          "backgroundColor": "transparent",
          "paddingBottom": 5,
        },
      ]
    }
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <RCTRefreshControl />
    <View />
  </RCTScrollView>
  <ModalScreen />
  <WritePostButton />
</View>
`;

exports[`FeedScreen component renders correctly with events 1`] = `
<View
  style={
    Array [
      Object {
        "backgroundColor": "undefined99",
      },
      Object {
        "flex": 1,
      },
    ]
  }
>
  <RCTScrollView
    contentContainerStyle={
      Array [
        Object {
          "backgroundColor": "transparent",
          "paddingTop": 5,
        },
      ]
    }
    data={undefined}
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={4}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={1}
    onContentSizeChange={[Function]}
    onEndReached={[Function]}
    onEndReachedThreshold={1}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onRefresh={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    refreshControl={
      <RefreshControlMock
        onRefresh={[Function]}
        progressViewOffset={undefined}
        refreshing={false}
      />
    }
    refreshing={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    style={
      Array [
        Object {
          "backgroundColor": "transparent",
          "paddingBottom": 5,
        },
      ]
    }
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <RCTRefreshControl />
    <View />
  </RCTScrollView>
  <ModalScreen />
  <WritePostButton />
</View>
`;

exports[`FeedScreen component renders correctly with modal on top 1`] = `
<View
  style={
    Array [
      Object {
        "backgroundColor": "undefined99",
      },
      Object {
        "flex": 1,
      },
    ]
  }
>
  <RCTScrollView
    contentContainerStyle={
      Array [
        Object {
          "backgroundColor": "transparent",
          "paddingTop": 5,
        },
      ]
    }
    data={undefined}
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={4}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={1}
    onContentSizeChange={[Function]}
    onEndReached={[Function]}
    onEndReachedThreshold={1}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onRefresh={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    refreshControl={
      <RefreshControlMock
        onRefresh={[Function]}
        progressViewOffset={undefined}
        refreshing={false}
      />
    }
    refreshing={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    style={
      Array [
        Object {
          "backgroundColor": "transparent",
          "paddingBottom": 5,
        },
      ]
    }
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <RCTRefreshControl />
    <View />
  </RCTScrollView>
  <ModalScreen />
  <WritePostButton />
</View>
`;

exports[`FeedScreen component renders correctly with no write post button 1`] = `
<View
  style={
    Array [
      Object {
        "backgroundColor": "undefined99",
      },
      Object {
        "flex": 1,
      },
    ]
  }
>
  <RCTScrollView
    contentContainerStyle={
      Array [
        Object {
          "backgroundColor": "transparent",
          "paddingTop": 5,
        },
      ]
    }
    data={undefined}
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={4}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={1}
    onContentSizeChange={[Function]}
    onEndReached={[Function]}
    onEndReachedThreshold={1}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onRefresh={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    refreshControl={
      <RefreshControlMock
        onRefresh={[Function]}
        progressViewOffset={undefined}
        refreshing={false}
      />
    }
    refreshing={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    style={
      Array [
        Object {
          "backgroundColor": "transparent",
          "paddingBottom": 5,
        },
      ]
    }
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <RCTRefreshControl />
    <View />
  </RCTScrollView>
  <ModalScreen />
  <WritePostButton />
</View>
`;

exports[`FeedScreen component renders correctly with write post button due to facebook availability 1`] = `
<View
  style={
    Array [
      Object {
        "backgroundColor": "undefined99",
      },
      Object {
        "flex": 1,
      },
    ]
  }
>
  <RCTScrollView
    contentContainerStyle={
      Array [
        Object {
          "backgroundColor": "transparent",
          "paddingTop": 5,
        },
      ]
    }
    data={undefined}
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={4}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={1}
    onContentSizeChange={[Function]}
    onEndReached={[Function]}
    onEndReachedThreshold={1}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onRefresh={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    refreshControl={
      <RefreshControlMock
        onRefresh={[Function]}
        progressViewOffset={undefined}
        refreshing={false}
      />
    }
    refreshing={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    style={
      Array [
        Object {
          "backgroundColor": "transparent",
          "paddingBottom": 5,
        },
      ]
    }
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <RCTRefreshControl />
    <View />
  </RCTScrollView>
  <ModalScreen />
  <WritePostButton />
</View>
`;

exports[`FeedScreen component renders correctly with write post button due to twitter availability 1`] = `
<View
  style={
    Array [
      Object {
        "backgroundColor": "undefined99",
      },
      Object {
        "flex": 1,
      },
    ]
  }
>
  <RCTScrollView
    contentContainerStyle={
      Array [
        Object {
          "backgroundColor": "transparent",
          "paddingTop": 5,
        },
      ]
    }
    data={undefined}
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={4}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={1}
    onContentSizeChange={[Function]}
    onEndReached={[Function]}
    onEndReachedThreshold={1}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onRefresh={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    refreshControl={
      <RefreshControlMock
        onRefresh={[Function]}
        progressViewOffset={undefined}
        refreshing={false}
      />
    }
    refreshing={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    style={
      Array [
        Object {
          "backgroundColor": "transparent",
          "paddingBottom": 5,
        },
      ]
    }
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <RCTRefreshControl />
    <View />
  </RCTScrollView>
  <ModalScreen />
  <WritePostButton />
</View>
`;

exports[`FeedScreen component renders correctly without events 1`] = `
<View
  style={
    Array [
      Object {
        "backgroundColor": "undefined99",
      },
      Object {
        "flex": 1,
      },
    ]
  }
>
  <RCTScrollView
    contentContainerStyle={
      Array [
        Object {
          "backgroundColor": "transparent",
          "paddingTop": 5,
        },
      ]
    }
    data={undefined}
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={4}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={1}
    onContentSizeChange={[Function]}
    onEndReached={[Function]}
    onEndReachedThreshold={1}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onRefresh={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    refreshControl={
      <RefreshControlMock
        onRefresh={[Function]}
        progressViewOffset={undefined}
        refreshing={false}
      />
    }
    refreshing={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    style={
      Array [
        Object {
          "backgroundColor": "transparent",
          "paddingBottom": 5,
        },
      ]
    }
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <RCTRefreshControl />
    <View />
  </RCTScrollView>
  <ModalScreen />
  <WritePostButton />
</View>
`;
